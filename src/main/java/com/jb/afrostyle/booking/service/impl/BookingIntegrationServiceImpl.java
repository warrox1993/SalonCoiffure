package com.jb.afrostyle.booking.service.impl;

import com.jb.afrostyle.booking.domain.entity.Booking;
import com.jb.afrostyle.booking.repository.BookingRepository;
import com.jb.afrostyle.booking.service.BookingIntegrationService;
import com.jb.afrostyle.integrations.google.googleCalendar.service.GoogleCalendarService;
import com.jb.afrostyle.salon.payload.dto.SalonDTO;
import com.jb.afrostyle.service.email.EmailService;
import com.jb.afrostyle.serviceoffering.payload.dto.ServiceDTO;
import com.jb.afrostyle.user.dto.UserDTO;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.time.format.DateTimeFormatter;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Impl√©mentation du service d'int√©gration des r√©servations
 * REFACTORIS√â : Extrait de BookingServiceImpl.createBooking()
 */
@Service
@RequiredArgsConstructor
public class BookingIntegrationServiceImpl implements BookingIntegrationService {
    
    private static final Logger log = LoggerFactory.getLogger(BookingIntegrationServiceImpl.class);
    
    private final GoogleCalendarService googleCalendarService;
    private final EmailService emailService;
    private final BookingRepository bookingRepository;
    
    @Override
    public Booking handlePostBookingIntegrations(
            Booking booking,
            UserDTO user,
            SalonDTO salon,
            Set<ServiceDTO> services) {
        
        log.info("üîó Starting integrations for booking ID: {}", booking.getId());
        
        // √âTAPE 1 : Enrichir les donn√©es pour les int√©grations
        booking = enrichBookingForIntegrations(booking, user, salon);
        
        // √âTAPE 2 : Cr√©er l'√©v√©nement Google Calendar
        String calendarEventId = createGoogleCalendarEvent(booking);
        if (calendarEventId != null) {
            booking.setGoogleCalendarEventId(calendarEventId);
            booking = bookingRepository.save(booking);
        }
        
        // √âTAPE 3 : Envoyer l'email de confirmation
        sendBookingConfirmationEmail(booking, user, salon, services);
        
        log.info("‚úÖ All integrations completed for booking ID: {}", booking.getId());
        return booking;
    }
    
    @Override
    public String createGoogleCalendarEvent(Booking booking) {
        try {
            log.info("üìÖ Creating Google Calendar event for booking: {}", booking.getId());
            
            String calendarEventId = googleCalendarService.createCalendarEvent(booking);
            
            if (calendarEventId != null) {
                log.info("‚úÖ Google Calendar event created with ID: {}", calendarEventId);
                return calendarEventId;
            } else {
                log.warn("‚ö†Ô∏è Google Calendar event could not be created");
                return null;
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error creating Google Calendar event for booking {}: {}", 
                    booking.getId(), e.getMessage());
            // Ne pas faire √©chouer la r√©servation si le calendrier √©choue
            return null;
        }
    }
    
    @Override
    public void sendBookingConfirmationEmail(
            Booking booking,
            UserDTO user,
            SalonDTO salon,
            Set<ServiceDTO> services) {
        
        try {
            log.info("üìß Sending booking confirmation email for booking: {}", booking.getId());
            
            // Formater les d√©tails des services pour l'email
            String serviceDetails = formatServiceDetailsForEmail(booking, services);
            
            // Envoyer l'email via EmailService
            emailService.sendBookingConfirmationEmail(
                    user.email(),
                    user.fullName(),
                    "AfroStyle Salon", // salonName - TODO: get from salon entity
                    formatBookingDetailsForEmail(booking)
            );
            
            log.info("‚úÖ Booking confirmation email sent to: {}", user.email());
            
        } catch (Exception e) {
            log.error("‚ùå Error sending booking confirmation email for booking {}: {}", 
                    booking.getId(), e.getMessage());
            // Ne pas faire √©chouer la r√©servation si l'email √©choue
        }
    }
    
    /**
     * Enrichit la r√©servation avec les donn√©es n√©cessaires aux int√©grations
     * REFACTORIS√â : Extrait de BookingServiceImpl
     */
    private Booking enrichBookingForIntegrations(Booking booking, UserDTO user, SalonDTO salon) {
        // Enrichir les donn√©es pour Google Calendar
        booking.setUserName(user.fullName());
        booking.setSalonName("AfroStyle Salon"); // Nom fixe pour le salon unique
        booking.setBookingDate(booking.getStartTime());
        
        log.info("üìù Booking enriched with integration data");
        return booking;
    }
    
    /**
     * Formate les d√©tails de la r√©servation pour l'email
     * REFACTORIS√â : Extrait de BookingServiceImpl
     */
    private String formatBookingDetailsForEmail(Booking booking) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
        StringBuilder details = new StringBuilder();
        details.append("R√©servation #").append(booking.getId()).append("\\n");
        details.append("Date: ").append(booking.getStartTime().format(dateFormatter)).append("\\n");
        details.append("Horaire: ").append(booking.getStartTime().format(timeFormatter))
               .append(" - ").append(booking.getEndTime().format(timeFormatter)).append("\\n");
        details.append("Prix total: ").append(booking.getTotalPrice()).append("‚Ç¨");
        
        return details.toString();
    }
    
    /**
     * Formate les d√©tails des services pour l'email
     * REFACTORIS√â : Extrait de BookingServiceImpl
     */
    private String formatServiceDetailsForEmail(Booking booking, Set<ServiceDTO> services) {
        if (services == null || services.isEmpty()) {
            return "Aucun service sp√©cifi√©";
        }
        
        return services.stream()
                .map(service -> "‚Ä¢ " + service.name() + " (" + service.duration() + "min, " + service.price() + "‚Ç¨)")
                .collect(Collectors.joining("\\n"));
    }
}