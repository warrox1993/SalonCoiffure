package com.jb.afrostyle.core.security;

import com.jb.afrostyle.core.constants.SecurityConstants;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.event.AbstractAuthenticationEvent;
import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
import org.springframework.security.authentication.event.AuthenticationFailureLockedEvent;
import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
import org.springframework.context.event.EventListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

/**
 * Configuration centralis√©e de s√©curit√© pour le syst√®me /core
 * Fournit des beans et configurations partag√©s pour tous les modules
 * Int√®gre logging de s√©curit√© et monitoring des √©v√©nements d'authentification
 * 
 * @version 1.0
 * @since Java 21
 */
@Configuration
public class SecurityCoreConfig {
    
    private static final Logger logger = LoggerFactory.getLogger(SecurityCoreConfig.class);
    
    // Statistiques de s√©curit√© en m√©moire (pour monitoring simple)
    private final Map<String, Object> securityStats = new ConcurrentHashMap<>();
    
    // Compteurs d'√©v√©nements
    private volatile long successfulLogins = 0;
    private volatile long failedLogins = 0;
    private volatile long lockedAccounts = 0;
    
    public SecurityCoreConfig() {
        logger.info("Initializing Security Core Configuration");
        initializeSecurityStats();
    }
    
    // ==================== CONFIGURATION BEANS ====================
    
    /**
     * Bean pour les statistiques de s√©curit√©
     * @return Map des statistiques de s√©curit√©
     */
    @Bean
    public Map<String, Object> securityStatistics() {
        return securityStats;
    }
    
    // ==================== EVENT LISTENERS ====================
    
    /**
     * √âcoute les √©v√©nements de connexion r√©ussie
     * @param event √âv√©nement d'authentification r√©ussie
     */
    @EventListener
    public void handleAuthenticationSuccess(AuthenticationSuccessEvent event) {
        String username = event.getAuthentication().getName();
        logger.info("‚úÖ Successful authentication for user: {}", username);
        
        successfulLogins++;
        updateSecurityStats();
        
        // Log s√©curis√© pour audit
        auditLog("AUTHENTICATION_SUCCESS", username, null);
    }
    
    /**
     * √âcoute les √©v√©nements de connexion √©chou√©e (mauvais credentials)
     * @param event √âv√©nement d'√©chec d'authentification
     */
    @EventListener
    public void handleAuthenticationFailure(AuthenticationFailureBadCredentialsEvent event) {
        String username = event.getAuthentication().getName();
        logger.warn("‚ùå Failed authentication for user: {} - Bad credentials", username);
        
        failedLogins++;
        updateSecurityStats();
        
        // Log s√©curis√© pour audit
        auditLog("AUTHENTICATION_FAILURE", username, "bad_credentials");
    }
    
    /**
     * √âcoute les √©v√©nements de compte verrouill√©
     * @param event √âv√©nement de compte verrouill√©
     */
    @EventListener
    public void handleAccountLocked(AuthenticationFailureLockedEvent event) {
        String username = event.getAuthentication().getName();
        logger.error("üîí Account locked for user: {}", username);
        
        lockedAccounts++;
        updateSecurityStats();
        
        // Log s√©curis√© pour audit
        auditLog("ACCOUNT_LOCKED", username, "account_locked");
    }
    
    /**
     * √âcoute tous les √©v√©nements d'authentification pour logging centralis√©
     * @param event √âv√©nement d'authentification
     */
    @EventListener
    public void handleAuthenticationEvent(AbstractAuthenticationEvent event) {
        String eventType = event.getClass().getSimpleName();
        String username = event.getAuthentication().getName();
        
        logger.debug("üîê Authentication event: {} for user: {}", eventType, username);
        
        // Mise √† jour du timestamp de derni√®re activit√©
        securityStats.put("lastAuthenticationEvent", LocalDateTime.now());
        securityStats.put("lastAuthenticationEventType", eventType);
        securityStats.put("lastAuthenticationUser", username);
    }
    
    // ==================== M√âTHODES UTILITAIRES ====================
    
    /**
     * Initialise les statistiques de s√©curit√©
     */
    private void initializeSecurityStats() {
        securityStats.put("startupTime", LocalDateTime.now());
        securityStats.put("successfulLogins", 0L);
        securityStats.put("failedLogins", 0L);
        securityStats.put("lockedAccounts", 0L);
        securityStats.put("lastUpdate", LocalDateTime.now());
        securityStats.put("securityConstantsLoaded", SecurityConstants.JWT_EXPIRATION != null);
        
        logger.debug("Security statistics initialized");
    }
    
    /**
     * Met √† jour les statistiques de s√©curit√©
     */
    private void updateSecurityStats() {
        securityStats.put("successfulLogins", successfulLogins);
        securityStats.put("failedLogins", failedLogins);
        securityStats.put("lockedAccounts", lockedAccounts);
        securityStats.put("lastUpdate", LocalDateTime.now());
        
        // Calcul de m√©triques d√©riv√©es
        long totalAttempts = successfulLogins + failedLogins;
        if (totalAttempts > 0) {
            double successRate = (double) successfulLogins / totalAttempts * 100.0;
            securityStats.put("successRate", Math.round(successRate * 100.0) / 100.0);
        }
        
        logger.debug("Security statistics updated - Success: {}, Failed: {}, Locked: {}", 
                    successfulLogins, failedLogins, lockedAccounts);
    }
    
    /**
     * Log d'audit s√©curis√©
     * @param action Action effectu√©e
     * @param username Nom d'utilisateur (peut √™tre null)
     * @param details D√©tails suppl√©mentaires
     */
    private void auditLog(String action, String username, String details) {
        // Format standard pour audit de s√©curit√©
        String auditMessage = String.format(
            "SECURITY_AUDIT: action=%s, user=%s, timestamp=%s, details=%s",
            action,
            username != null ? username : "unknown",
            LocalDateTime.now(),
            details != null ? details : "none"
        );
        
        // Log dans un logger sp√©cial pour audit (configurable via logback)
        Logger auditLogger = LoggerFactory.getLogger("SECURITY_AUDIT");
        auditLogger.info(auditMessage);
    }
    
    // ==================== M√âTHODES PUBLIQUES ====================
    
    /**
     * Obtient les statistiques de s√©curit√© actuelles
     * @return Map des statistiques
     */
    public Map<String, Object> getCurrentSecurityStats() {
        return Map.copyOf(securityStats);
    }
    
    /**
     * Remet √† z√©ro les compteurs de s√©curit√©
     */
    public void resetSecurityStats() {
        logger.info("Resetting security statistics");
        
        successfulLogins = 0;
        failedLogins = 0;
        lockedAccounts = 0;
        
        initializeSecurityStats();
        auditLog("STATS_RESET", "system", "security_stats_reset");
    }
    
    /**
     * Obtient le taux de succ√®s des authentifications
     * @return Taux de succ√®s en pourcentage
     */
    public double getAuthenticationSuccessRate() {
        long totalAttempts = successfulLogins + failedLogins;
        if (totalAttempts == 0) {
            return 0.0;
        }
        return (double) successfulLogins / totalAttempts * 100.0;
    }
    
    /**
     * V√©rifie si le syst√®me a des probl√®mes de s√©curit√©
     * @return true s'il y a des alertes de s√©curit√©
     */
    public boolean hasSecurityAlerts() {
        // Crit√®res d'alerte simples
        double successRate = getAuthenticationSuccessRate();
        long totalAttempts = successfulLogins + failedLogins;
        
        // Alerte si taux de succ√®s tr√®s bas avec suffisamment de tentatives
        if (totalAttempts >= 10 && successRate < 50.0) {
            return true;
        }
        
        // Alerte si trop de comptes verrouill√©s
        if (lockedAccounts > 0) {
            return true;
        }
        
        return false;
    }
    
    /**
     * Obtient un rapport de s√©curit√© d√©taill√©
     * @return String avec rapport de s√©curit√©
     */
    public String getSecurityReport() {
        StringBuilder report = new StringBuilder();
        report.append("=== SECURITY REPORT ===\n");
        report.append(String.format("Successful Logins: %d\n", successfulLogins));
        report.append(String.format("Failed Logins: %d\n", failedLogins));
        report.append(String.format("Locked Accounts: %d\n", lockedAccounts));
        report.append(String.format("Success Rate: %.2f%%\n", getAuthenticationSuccessRate()));
        report.append(String.format("Has Alerts: %s\n", hasSecurityAlerts() ? "YES" : "NO"));
        report.append(String.format("Last Update: %s\n", securityStats.get("lastUpdate")));
        report.append("========================");
        
        return report.toString();
    }
    
    /**
     * Valide la configuration de s√©curit√©
     * @return true si configuration valide
     */
    public boolean validateSecurityConfiguration() {
        boolean valid = true;
        
        // V√©rifier que les constantes de s√©curit√© sont charg√©es
        if (SecurityConstants.JWT_EXPIRATION == null) {
            logger.error("SecurityConstants not properly loaded");
            valid = false;
        }
        
        // V√©rifier les endpoints publics
        if (SecurityConstants.PUBLIC_ENDPOINTS.length == 0) {
            logger.warn("No public endpoints defined - may cause authentication issues");
        }
        
        // V√©rifier les endpoints admin
        if (SecurityConstants.ADMIN_ENDPOINTS.length == 0) {
            logger.warn("No admin endpoints defined");
        }
        
        if (valid) {
            logger.info("‚úÖ Security configuration validation passed");
        } else {
            logger.error("‚ùå Security configuration validation failed");
        }
        
        return valid;
    }
}